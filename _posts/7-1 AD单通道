void RCC_ADCCLKConfig(uint32_t RCC_PCLK2);              在RCC.h文件中 可以对APB2的72Mhz选择2,4,6,8分频，输入到ADCCLK
void ADC_DeInit(ADC_TypeDef* ADCx);                          恢复缺省配置
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct);            Init初始化
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct);                            Structure初始化
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState);                  给ADC上电的
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState);                    开启DMA输出信号的，使用DMA转运数据需要使用
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState);      中断输出控制

void ADC_ResetCalibration(ADC_TypeDef* ADCx);      复位校准
FlagStatus ADC_GetResetCalibrationStatus(ADC_TypeDef* ADCx);    获取复位校准数据
void ADC_StartCalibration(ADC_TypeDef* ADCx);        开启校准
FlagStatus ADC_GetCalibrationStatus(ADC_TypeDef* ADCx);    开启校准状态

void ADC_TempSensorVrefintCmd(FunctionalState NewState);              获取标志位状态
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);

void ADC_DiscModeChannelCountConfig(ADC_TypeDef* ADCx, uint8_t Number);        配置间断模式
void ADC_DiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);        是否启用间断模式


void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
指定通道  

void ADC_ExternalTrigConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
ADC外部触发转换控制

uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx);            获取AD转换的数据寄存器，读取转换结果

uint32_t ADC_GetDualModeConversionValue(void);    双ADC模式读取转换结果的模式

void ADC_AutoInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_InjectedDiscModeCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_ExternalTrigInjectedConvConfig(ADC_TypeDef* ADCx, uint32_t ADC_ExternalTrigInjecConv);
void ADC_ExternalTrigInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
void ADC_SoftwareStartInjectedConvCmd(ADC_TypeDef* ADCx, FunctionalState NewState);
FlagStatus ADC_GetSoftwareStartInjectedConvCmdStatus(ADC_TypeDef* ADCx);
void ADC_InjectedChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime);
void ADC_InjectedSequencerLengthConfig(ADC_TypeDef* ADCx, uint8_t Length);
void ADC_SetInjectedOffset(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel, uint16_t Offset);
uint16_t ADC_GetInjectedConversionValue(ADC_TypeDef* ADCx, uint8_t ADC_InjectedChannel);
ADC注入组进行配置

模拟看门狗进行配置
void ADC_AnalogWatchdogCmd(ADC_TypeDef* ADCx, uint32_t ADC_AnalogWatchdog);    是否启动看门狗
void ADC_AnalogWatchdogThresholdsConfig(ADC_TypeDef* ADCx, uint16_t HighThreshold, uint16_t LowThreshold);  模拟看门狗的阈值
void ADC_AnalogWatchdogSingleChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel);  配置看门狗的通道

void ADC_TempSensorVrefintCmd(FunctionalState NewState);      ADC温度传感器，内部参考电压控制，开启内部的两个通道

FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);        获取中断标志位
void ADC_ClearFlag(ADC_TypeDef* ADCx, uint8_t ADC_FLAG);                  清除中断标志位
ITStatus ADC_GetITStatus(ADC_TypeDef* ADCx, uint16_t ADC_IT);             获取中断状态
void ADC_ClearITPendingBit(ADC_TypeDef* ADCx, uint16_t ADC_IT);            清除中断挂起位


